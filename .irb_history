17 +42
""
"foo"
"foo" + "bar"
first_name = "Michael"
 "#{first_name} Hartl" 
first_name = "Michael"
last_name = "Michael"
first_name + " " + last_name 
"#{first_name} #{last_name}"
puts "foo"
print "foo"
city = "Komae"
prefecture = "Tokyo"
puts city
puts prefecture + city
puts "#{prefecture} #{city}"
exit
"foobar".length
"foobar".empty?
s = "foobar"
if s.empty?\
  "Emptyyyyyyyy"\
else\
  "not Empty"\
end
puts "x is not empty" if !x.empty?
x = "string"
puts "x is not empty" if !x.empty?
string = "racecar"
string.reverse
def palindrome_tester(s)\
  if s == s.reverse\
    puts "palindrome"\
  else\
    puts "not palindrome"\
  end\
end
palindrome_tester(ror)
palindrome_tester("ror")
palindrome_tester("rora")
palindrome_tester("rora").nil?
"foo bar buzz".split
"fooxbarxbuzz".split("x")
a = [42, 8, 17]
a[0]
a[1]
a[2]
a[-1]
a[-2]
a[-30]
'b'..'g'
('b'..'g').to_a
('z'..'a').to_a
('b'..'g').to_a
a = "A man, a plan, a canal, Panama"
a = "A man, a plan, a canal, Panama".split(",")
a 
s = a.join
s
s.split(' ').join
s
'a'..'z'.to_a
('a'..'z').to_a
array = ('a'..'z').to_a
array[6]
array[-6]
array[-7]
(1..5).each do |number|\
  puts 2*number\
  puts '--'\
end
 3.times { puts "Betelgeuse!" }
puts 0..16
puts (0..16).to_s
puts (0..16).to_a
puts (0..16)**.to_a

(0..16).each{ |i| p i**2}
def yeller(a)\
  puts   a.join.upcase\
end
yeller(['o', 'l', 'd'])
def random_subdomain()\
  ('a'..'z').to_a.shuffle[0..7].join\
end
random_subdomain
random_subdomain
random_subdomain
random_subdomain
random_subdomain
def string_shuffle(s)\
  s.split('').shuffle.join\
end
string_shuffle('foobar')
string_shuffle('foobar')
string_shuffle('foobar')
user = {}
user["first_name"] = "Michael"
user["last_name"] = "Hartle"
user
user = {:name => "Michael Hartle", :email => "hoge@mail.com"}
user[:name]
user[:email]
user[:email]
user = {name: "Michael Hartle", email: "hoge@mail.com"}
user
user = {name: "Michael Hartle", email: "hoge@mail.com"}
flash = { success:"It worked!", danger:"It failed"}
flash.each do |key, value|\
  puts "Key #{key.inspect} has value #{value.inspect}"\
end
puts(1..5).to_a
puts (1..5).to_a
puts (1..5).to_a.inspect
hash = {one: 'uno', two: 'dos', three: 'tres'}
hash = {one: 'uno', two: 'dos', three: 'tres'}
hash = {one: 'uno', two: 'dos', three: 'tres'}
hash.each do |key, value|\
  puts "#{key} is #{value} in Spanish"\
end
person1 = {first:John, last:Macky}
person1 = {first:"John", last:"Macky"}
person2 = {first:"Jack", last:"Mile"}
person3 = {first:"Tayler", last:"Swoft"}
params = {}
params[:father] = person1
params[:mother] = person2
params[:child] = person3
params[:father][:first] = person1[:first]
params[:father][:first] == person1[:first]
params[:father][:last] == person1[:last]
test = (1..10)
test.class
test2 = new Range(1..10)
test2 = Range.new(1..10)
test2 = Range.new(1, 10)
s = String.new("foobar")
s.class
s.class.superclass
s.class.superclass.superclass
s.class.superclass.superclass.class
s.class.superclass.superclass.superclass
class Word\
  def palindrome?(string)\
    string = string.reverse\
  end\
end
w = Word.new
w.palindrome?(test)
w.palindrome?("test")
class Word\
  def palindrome?(string)\
    string == string.reverse\
  end\
end
w = Word.new
w.palindrome?("test")
w.palindrome?("ror")
class Word < String\
  def palindrome?\
    self == self.reverse\
  end\
end
exit
class Word < String\
  def palindrome?\
    self == self.reverse\
  end\
end
s = Word.new("level")
s.palindrome?
s.length
"".blank?

s = Word.new("racecar")
s.palindrome?
s = Word.new("onomatopoeia")
s.palindrome?
controller = StaticPagesController.new
controller.class
controller.class.superclass
require './example_user'
example = User.new
example.name
example.name = "Example User"
example.email = "user@example.com"
example.formatted_email
exit
